// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Full Version"

// DATE "03/18/2019 10:07:09"

// 
// Device: Altera EP4CE10F17C8 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module flow_led (
	sys_clk50m,
	rst_n,
	led);
input 	sys_clk50m;
input 	rst_n;
output 	[3:0] led;

// Design Ports Information
// sys_clk50m	=>  Location: PIN_E1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// rst_n	=>  Location: PIN_M1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// led[0]	=>  Location: PIN_D11,	 I/O Standard: 2.5 V,	 Current Strength: Default
// led[1]	=>  Location: PIN_C11,	 I/O Standard: 2.5 V,	 Current Strength: Default
// led[2]	=>  Location: PIN_E10,	 I/O Standard: 2.5 V,	 Current Strength: Default
// led[3]	=>  Location: PIN_F9,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("flow_led_min_1200mv_0c_v_fast.sdo");
// synopsys translate_on

wire \sys_clk50m~input_o ;
wire \rst_n~input_o ;
wire \led[0]~output_o ;
wire \led[1]~output_o ;
wire \led[2]~output_o ;
wire \led[3]~output_o ;


// Location: IOOBUF_X32_Y24_N23
cycloneive_io_obuf \led[0]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \led[0]~output .bus_hold = "false";
defparam \led[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X23_Y24_N2
cycloneive_io_obuf \led[1]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \led[1]~output .bus_hold = "false";
defparam \led[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X28_Y24_N23
cycloneive_io_obuf \led[2]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \led[2]~output .bus_hold = "false";
defparam \led[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X23_Y24_N16
cycloneive_io_obuf \led[3]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \led[3]~output .bus_hold = "false";
defparam \led[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N8
cycloneive_io_ibuf \sys_clk50m~input (
	.i(sys_clk50m),
	.ibar(gnd),
	.o(\sys_clk50m~input_o ));
// synopsys translate_off
defparam \sys_clk50m~input .bus_hold = "false";
defparam \sys_clk50m~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N22
cycloneive_io_ibuf \rst_n~input (
	.i(rst_n),
	.ibar(gnd),
	.o(\rst_n~input_o ));
// synopsys translate_off
defparam \rst_n~input .bus_hold = "false";
defparam \rst_n~input .simulate_z_as = "z";
// synopsys translate_on

assign led[0] = \led[0]~output_o ;

assign led[1] = \led[1]~output_o ;

assign led[2] = \led[2]~output_o ;

assign led[3] = \led[3]~output_o ;

endmodule
